# Re-analysis 2 {#studyII}

This reanalysis is based on the paper:

> Huskisson, S.M., Jacobson, S.L., Egelkamp, C.L. et al. Using a Touchscreen Paradigm to Evaluate Food Preferences and Response to Novel Photographic Stimuli of Food in Three Primate Species (Gorilla gorilla gorilla, Pan troglodytes, and Macaca fuscata). Int J Primatol 41, 5â€“23 (2020). https://doi.org/10.1007/s10764-020-00131-0


```{r warning=F, message=F}
library(bpcs)
library(tidyverse)
library(knitr)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
set.seed(99)
```

## Importing the data

The data from this paper was made available upon request and below we exemplify a few rows of how the original dataset looks like

```{r message=F, warning=F}
d <- readr::read_csv('data/touchscreen.csv')
```

Previewing how the data looks like
```{r}
dplyr::sample_n(d, size = 10) %>% 
  knitr::kable(caption='Sample of how the dataset looks like') %>% 
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
  kableExtra::scroll_box(width = "100%")
```

Now we need to modify a bit the data frame to create a column with the results as 0 and 1.

Creating a numerical result vector with 0 for image1 and 1 for image2
```{r}
d <- d %>% 
  dplyr::mutate(y =ifelse(image_chosen==image1, 0, 1))
```


Adding names to the abbreviations
```{r}
#image1
d$image1 <- dplyr::recode(d$image1, "Ca" = 'Carrot')
d$image1 <- dplyr::recode(d$image1, "Cu" = 'Cucumber')
d$image1 <- dplyr::recode(d$image1, "Tu" = 'Turnip')
d$image1 <- dplyr::recode(d$image1, "Gr" = 'Grape')
d$image1 <- dplyr::recode(d$image1, "To" = 'Tomato')
d$image1 <- dplyr::recode(d$image1, "Ap" = 'Apple')
d$image1 <- dplyr::recode(d$image1, "Jp" = 'Jungle Pellet')
d$image1 <- dplyr::recode(d$image1, "Ce" = 'Celery')
d$image1 <- dplyr::recode(d$image1, "Gb" = 'Green Beans')
d$image1 <- dplyr::recode(d$image1, "Oa" = 'Oats')
d$image1 <- dplyr::recode(d$image1, "Pe" = 'Peanuts')

#image2
d$image2 <- dplyr::recode(d$image2, "Ca" = 'Carrot')
d$image2 <- dplyr::recode(d$image2, "Cu" = 'Cucumber')
d$image2 <- dplyr::recode(d$image2, "Tu" = 'Turnip')
d$image2 <- dplyr::recode(d$image2, "Gr" = 'Grape')
d$image2 <- dplyr::recode(d$image2, "To" = 'Tomato')
d$image2 <- dplyr::recode(d$image2, "Ap" = 'Apple')
d$image2 <- dplyr::recode(d$image2, "Jp" = 'Jungle Pellet')
d$image2 <- dplyr::recode(d$image2, "Ce" = 'Celery')
d$image2 <- dplyr::recode(d$image2, "Gb" = 'Green Beans')
d$image2 <- dplyr::recode(d$image2, "Oa" = 'Oats')
d$image2 <- dplyr::recode(d$image2, "Pe" = 'Peanuts')
```


Separating the data into three datasets. One for each species.

```{r}
macaque <- d %>% 
  dplyr::filter(species_type=='Macaque')

chip <- d %>% 
  dplyr::filter(species_type=='Chimpanzee')

gor <- d %>% 
  dplyr::filter(species_type=='Gorilla')
```


Below we show a few lines of each dataset:

```{r}
dplyr::sample_n(gor, size = 10) %>% 
  knitr::kable(caption='Sample of how the gorilla dataset looks like') %>% 
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
  kableExtra::scroll_box(width = "100%")
```

```{r}
dplyr::sample_n(chip, size = 10) %>% 
  knitr::kable(caption='Sample of how the chimpanzees dataset looks like') %>% 
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
  kableExtra::scroll_box(width = "100%")
```

```{r}
dplyr::sample_n(macaque, size = 10) %>% 
  knitr::kable(caption='Sample of how the macaques dataset looks like') %>% 
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
  kableExtra::scroll_box(width = "100%")
```


## Simple Bradley-Terry model

Now that the data is ready let's fit three simple Bayesian Bradley-Terry models

```{r eval=F}
m1_macaque <-
  bpc(
    macaque,
    player0 = 'image1',
    player1 = 'image2',
    result_column = 'y',
    model_type = 'bt',
    priors = list(prior_lambda_std = 1.0),
    iter = 3000
  )
save_bpc_model(m1_macaque, 'm1_macaque', 'fittedmodels')

m1_chip <-
  bpc(
    chip,
    player0 = 'image1',
    player1 = 'image2',
    result_column = 'y',
    model_type = 'bt',
    priors = list(prior_lambda_std = 1.0),
    iter = 3000
  )
save_bpc_model(m1_chip, 'm1_chip', 'fittedmodels')

m1_gor <-
  bpc(
    gor,
    player0 = 'image1',
    player1 = 'image2',
    result_column = 'y',
    model_type = 'bt',
    priors = list(prior_lambda_std = 1.0),
    iter = 3000
  )
save_bpc_model(m1_gor, 'm1_gor', 'fittedmodels')
```

```{r echo=F}
m1_macaque <- load_bpc_model('fittedmodels/m1_macaque.RDS')
m1_chip <- load_bpc_model('fittedmodels/m1_chip.RDS')
m1_gor <- load_bpc_model('fittedmodels/m1_gor.RDS')
```


### Assessing the fitness of the model

Here we are illustrating how to conduct the diagnostic analysis for one model only. Since the shinystan app does not appear in the compiled appendix we are just representing it here once for the Chimpanzees model. Note that it is still possible to use the bayesplot package to generate static figures if needed.

```{r eval=F}
#First we get the posterior predictive in the environment
pp_m1_chip <- posterior_predictive(m1_chip, n = 100)
y_pp_m1_chip <- pp_m1_chip_gor$y
ypred_pp_m1_chip <- pp_m1_chip$y_pred
```

Then we launch shinystan to assess convergence and validity of the model
```{r eval=F}
launch_shinystan(m1_chip)
```

### Getting the WAIC
Before we start getting the parameters tables and etc let's get the WAIC so we can compare with the next model (with random effects)

```{r cache=T}
get_waic(m1_macaque)
```

```{r cache=T}
get_waic(m1_chip)
```

```{r cache=T}
get_waic(m1_gor)
```

## Bradley-Terry model with random effects for individuals

Let's add the cluster SubjectCode as a random effects in our model
```{r eval=F}
m2_macaque <-
  bpc(
    macaque,
    player0 = 'image1',
    player1 = 'image2',
    result_column = 'y',
    model_type = 'bt-U',
    cluster = c('SubjectCode'),
    priors = list(
      prior_lambda_std = 1.0,
      prior_U1_std = 1.0
    ),
    iter = 3000
  )
save_bpc_model(m2_macaque, 'm2_macaque', 'fittedmodels')

m2_chip <-
  bpc(
    chip,
    player0 = 'image1',
    player1 = 'image2',
    cluster = c('SubjectCode'),
    result_column = 'y',
    model_type = 'bt-U',
    priors = list(
      prior_lambda_std = 1.0,
      prior_U1_std = 1.0
    ),
    iter = 3000
  )
save_bpc_model(m2_chip, 'm2_chip', 'fittedmodels')

m2_gor <-
  bpc(
    gor,
    player0 = 'image1',
    player1 = 'image2',
    cluster = c('SubjectCode'),
    result_column = 'y',
    model_type = 'bt-U',
    priors = list(
      prior_lambda_std = 1.0,
      prior_U1_std = 1.0
    ),
    iter = 3000
  )
save_bpc_model(m2_gor, 'm2_gor', 'fittedmodels')
```

```{r echo=F}
#loading the model
m2_macaque <- load_bpc_model('fittedmodels/m2_macaque.RDS')
m2_chip <- load_bpc_model('fittedmodels/m2_chip.RDS')
m2_gor <- load_bpc_model('fittedmodels/m2_gor.RDS')
```

Of course we should run diagnostic analysis on the models. For the gorillas
```{r eval=F}
launch_shinystan(m2_gor)
```

### Getting the WAIC

Before we start plotting tables let's get the WAIC for each random effects model and compare with the first models without random effects

```{r cache=T}
get_waic(m2_macaque)
```

```{r cache=T}
get_waic(m2_chip)
```

```{r cache=T}
get_waic(m2_gor)
```

Below I just copied the result of the WAIC into a data frame to create the tables. Of course this process could be automated.
```{r}
waic_table <-
  data.frame(
    Species = c('Macaques', 'Chimpanzees', 'Gorillas'),
    BT = c(7101.6, 7199.5, 9767.4),
    BTU = c(6713.2, 6719.7, 8792.2)
  )
```

The kableExtra package provides some nice tools to create tables from R directly to Latex

```{r}
kable(
  waic_table,  booktabs=T,
  caption = 'Comparison of the WAIC of the Bradley-Terry model and the Bradley-Terry model with random effects on the subjects for each specie',
  col.names = c('Specie', 'Bradley-Terry', 'Bradley-Terry with random effects')
) %>%
  kableExtra::add_header_above(c(" " = 1, "WAIC" = 2)) %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
  kableExtra::scroll_box(width = "100%")
```


```{r eval=F, echo=F}
#Same table in latex
kable(
  waic_table,
   booktabs=T,
  format='latex',
  caption = 'Comparison of the WAIC of the Bradley-Terry model and the Bradley-Terry model with random effects on the subjects for each specie',
  col.names = c('Specie', 'Bradley-Terry', 'Bradley-Terry with random effects')
) %>%
  kableExtra::add_header_above(c(" " = 1, "WAIC" = 2)) %>%
  kableExtra::kable_styling()
```


We can see that the random effects model perform much better than the simple BT model by having a much lower WAIC. Therefore from now we will use only the random effects model to generate our tables and plots


### Parameter tables and plots

Now let's create some plots and tables to analyze and compare the models

#### Parameters table

Creating a nice table of the parameters.

First let's put all species in the same data frame
```{r}
df1 <- get_parameters(m2_macaque, n_eff = F)
df2 <- get_parameters(m2_chip, n_eff = F)
df3 <- get_parameters(m2_gor, n_eff = F)

df1 <- df1 %>% dplyr::mutate(Species='Macaque')
df2 <- df2 %>% dplyr::mutate(Species='Chimpanzees')
df3 <- df3 %>% dplyr::mutate(Species='Gorilla')

#appending the dataframes
df <- rbind(df1,df2,df3)

#Removing the individual random effects parameters otherwise the table will be much bigger
df <- df %>% 
  filter(!startsWith(Parameter,'U1['))

#Re-coding the parameters (removing the lambda) so it reads nicer in the table.
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Carrot]'='Carrot')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Grape]'='Grape')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Turnip]'='Turnip')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Cucumber]'='Cucumber')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Tomato]'='Tomato')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Apple]'='Apple')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Jungle Pellet]'='Jungle Pellet')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Green Beans]'='Green Beans')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Celery]'='Celery')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Oats]'='Oats')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Peanuts]'='Peanuts')
```

Now let's create the table by removing the species column and adding some row Headers for the species
```{r}
(df %>% select(-Species) %>% 
kable( caption = 'Parameters of the model with random effects', digits = 2, col.names = c('Parameter', 'Mean', 'HPD lower', 'HPD upper')) %>% 
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
  kableExtra::pack_rows("Macaque", 1, 6) %>%
  kableExtra::pack_rows("Chimpanzees", 7, 13) %>% 
  kableExtra::pack_rows("Gorilla", 14, 20) %>% 
  kableExtra::scroll_box(width = "100%")
)
```

```{r eval=F, echo=F}
df %>% select(-Species) %>% 
kable( format='latex', booktabs=T, caption = 'Parameters of the model with random effects', digits = 2, col.names = c('Parameter', 'Mean', 'HPD lower', 'HPD upper')) %>% 
kableExtra::kable_styling() %>% 
  kableExtra::pack_rows("Macaque", 1, 6) %>%
  kableExtra::pack_rows("Chimpanzees", 7, 13) %>% 
  kableExtra::pack_rows("Gorilla", 14, 20) 
```


#### Rank table
Rank of the food preferences
```{r cache=T}
rank1 <- get_rank_of_players_df(m2_macaque)
rank2 <- get_rank_of_players_df(m2_chip)
rank3 <- get_rank_of_players_df(m2_gor)

#appending the dataframes
rank_all <- rbind(rank1,rank2,rank3)

#Re-coding the parameters (removing the lambda) so it reads nicer in the table.
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Carrot]'='Carrot')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Grape]'='Grape')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Turnip]'='Turnip')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Cucumber]'='Cucumber')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Tomato]'='Tomato')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Apple]'='Apple')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Jungle Pellet]'='Jungle Pellet')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Green Beans]'='Green Beans')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Celery]'='Celery')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Oats]'='Oats')
rank_all$Parameter <- dplyr::recode(rank_all$Parameter, 'lambda[Peanuts]'='Peanuts')

```

Now let's create the rank table

```{r}
(rank_all %>% 
kable( caption = 'Ranking of the food preferences per specie with model with random effects', digits = 2, col.names = c('Food', 'Median Rank', 'Mean Rank', 'Std. Rank')) %>% 
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
  kableExtra::pack_rows("Macaque", 1, 6) %>%
  kableExtra::pack_rows("Chimpanzees", 7, 12) %>% 
  kableExtra::pack_rows("Gorilla", 13, 18) %>% 
  kableExtra::scroll_box(width = "100%")
)
```


```{r echo=F, eval=F}
(rank_all %>% 
kable( format='latex', caption = 'Ranking of the food preferences per specie with model with random effects', digits = 2, col.names = c('Food', 'Median Rank', 'Mean Rank', 'Std. Rank'), booktabs=T) %>% 
kableExtra::kable_styling() %>% 
  kableExtra::pack_rows("Macaque", 1, 6) %>%
  kableExtra::pack_rows("Chimpanzees", 7, 12) %>% 
  kableExtra::pack_rows("Gorilla", 13, 18)
)
```

#### Plot
Now let's use ggplot to create a plot comparing both types of model. The simple BT and the BT with Random effects

First we need to prepare the data frames for plotting. For the simple BT model (called old)
```{r}
df1_old <- get_parameters(m1_macaque, n_eff = F)
df2_old <- get_parameters(m1_chip, n_eff = F)
df3_old <- get_parameters(m1_gor, n_eff = F)

df1_old <- df1_old %>% dplyr::mutate(Species='Macaque', Model='Simple')
df2_old <- df2_old %>% dplyr::mutate(Species='Chimpanzees', Model='Simple')
df3_old <- df3_old %>% dplyr::mutate(Species='Gorilla', Model='Simple')

#appending the dataframes
df_old <- rbind(df1_old,df2_old,df3_old)

#Removing the individual random effects parameters
df_old <- df_old %>% 
  filter(!startsWith(Parameter,'U'))

#Re-coding some parameters so it reads nicer in the figure
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Carrot]'='Carrot')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Grape]'='Grape')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Turnip]'='Turnip')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Cucumber]'='Cucumber')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Tomato]'='Tomato')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Apple]'='Apple')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Jungle Pellet]'='Jungle Pellet')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Green Beans]'='Green Beans')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Celery]'='Celery')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Oats]'='Oats')
df_old$Parameter <- dplyr::recode(df_old$Parameter, 'lambda[Peanuts]'='Peanuts')
```

For the BT with random effects

```{r}
df1 <- get_parameters(m2_macaque, n_eff = F)
df2 <- get_parameters(m2_chip, n_eff = F)
df3 <- get_parameters(m2_gor, n_eff = F)

df1 <- df1 %>% dplyr::mutate(Species='Macaque', Model='RandomEffects')
df2 <- df2 %>% dplyr::mutate(Species='Chimpanzees', Model='RandomEffects')
df3 <- df3 %>% dplyr::mutate(Species='Gorilla', Model='RandomEffects')

#appending the dataframes
df <- rbind(df1,df2,df3)

#Removing the individual random effects parameters
df <- df %>% 
  filter(!startsWith(Parameter,'U'))

#Re-coding some parameters so it reads nicer in the figure
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Carrot]'='Carrot')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Grape]'='Grape')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Turnip]'='Turnip')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Cucumber]'='Cucumber')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Tomato]'='Tomato')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Apple]'='Apple')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Jungle Pellet]'='Jungle Pellet')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Green Beans]'='Green Beans')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Celery]'='Celery')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Oats]'='Oats')
df$Parameter <- dplyr::recode(df$Parameter, 'lambda[Peanuts]'='Peanuts')
```

Now we can merge them in a single data frame for ggplot

```{r}
#appending the dataframes
out <- rbind(df, df_old)
#To order in ggplot we need to specify the order in the levels. We want to place the first model first and the random effects second
out$Model<-factor(out$Model, levels=c('Simple','RandomEffects'))

# Defining a black-gray palette:
cbp1 <- c("#000000", "#999999")

#Using the pointrange function to define the HPD intervals
ggplot(out, aes(x=Parameter))+
  geom_pointrange(aes(
        ymin = HPD_lower,
        ymax = HPD_higher,
        y = Mean,
        group=Model, 
        color=Model),
           position=position_dodge(width=1))+ #separating the two models (so they are not plotted overlapping)
  labs(title = 'Parameters estimates with uncertainty (HPD) interval',
       y = 'Worth value',
        x = 'Food')+
  facet_grid(~Species) + #Dividing the plot into three by species
  theme_bw()+ # A black and white theme
  # scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme(legend.position="bottom")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+#small adjustments to the theme
  scale_colour_manual(values = cbp1) #applying the color palette

```


####  Probability of selecting a novel stimuli

We will create a the table of the predictions of selecting a novel stimuli (compared to the trained ones). This is replication of table II of the original paper (of course the results are not the same since we are using different models and estimation values)

For that, we first create a data frame of the new predictions for each species. Since our model uses random effects and we would need to specify each random effect to make the predictions we will do something slightly different. We will consider that the random effects will be zero, that is, which is equivalent to the average value of the random effects (remember that it has a mean of zero). One way to achieve this is by using the obtained coefficients in a submodel. This can be done in the bpcs package by using the model_type option.

We ask for the data frame instead of the table because we will assemble the table manually.

```{r eval=F}
# Create a data frame with all the pairs of food that we want to calculate
pairs_gor <-
  data.frame(
    image1 = c(
      'Apple',
      'Apple',
      'Apple',
      'Apple',
      'Tomato',
      'Tomato',
      'Tomato',
      'Tomato'
    ),
    image2 = c(
      'Cucumber',
      'Grape',
      'Turnip',
      'Carrot',
      'Cucumber',
      'Grape',
      'Turnip',
      'Carrot'
    )
  )

pairs_chip <-
  data.frame(
    image1 = c(
      'Apple',
      'Apple',
      'Apple',
      'Apple',
      'Tomato',
      'Tomato',
      'Tomato',
      'Tomato'
    ),
    image2 = c(
      'Cucumber',
      'Grape',
      'Turnip',
      'Carrot',
      'Cucumber',
      'Grape',
      'Turnip',
      'Carrot'
    )
  )


pairs_macaque <-
  data.frame(
    image1 = c(
      'Oats',
      'Oats',
      'Oats',
      'Oats',
      'Green Beans',
      'Green Beans',
      'Green Beans',
      'Green Beans'
    ),
    image2 = c(
      'Celery',
      'Jungle Pellet',
      'Peanuts',
      'Carrot',
      'Celery',
      'Jungle Pellet',
      'Peanuts',
      'Carrot'
    )
  )


prob_chip <-
  get_probabilities_df(
    m2_chip, 
    newdata = pairs_chip,
    model_type = 'bt') #here we are assuming zero for the random effects

prob_macaque <-
  get_probabilities_df(
    m2_macaque, 
    newdata = pairs_macaque, 
    model_type = 'bt')

prob_gor <-
  get_probabilities_df(
    m2_gor, 
    newdata = pairs_gor, 
    model_type = 'bt')

#merging in a single df
prob_table <- rbind(prob_gor, prob_chip, prob_macaque)

#since this is  a time consuming table to make let's also save it
saveRDS(prob_table, 'prob_table.RDS')
```

```{r echo=F}
prob_table <- readRDS('prob_table.RDS')
```

Now we can create the table

```{r}
prob_table <- prob_table %>%
  mutate(Probability = i_beats_j,
         OddsRatio = Probability / (1 - Probability))

prob_table %>%
  dplyr::select(i, j, Probability, OddsRatio) %>%
  kable(
    caption = 'Posterior probabilities of the novel stimuli i being selected over the trained stimuli j',
    booktabs = T,
    digits = 2,
    col.names = c('Item i', 'Item j', 'Probability', 'Odds Ratio')
  ) %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  kableExtra::pack_rows("Gorilla", 1, 8) %>%
  kableExtra::pack_rows("Chimpanzee", 9, 16) %>%
  kableExtra::pack_rows("Macaque", 17, 24) %>% 
  kableExtra::scroll_box(width = "100%")
```

```{r echo=F, eval=F}
prob_table %>% 
  dplyr::select(i,j,Probability,OddsRatio) %>% 
  kable(format='latex',
        caption='Posterior probabilities of the novel stimuli i being selected over the trained stimuli j',
        booktabs=T,
        digits=2,
        col.names = c('Item i', 'Item j', 'Probability', 'Odds Ratio')) %>% 
    kableExtra::kable_styling() %>% 
    kableExtra::pack_rows("Gorilla", 1, 8) %>%
    kableExtra::pack_rows("Chimpanzee", 9, 16) %>% 
    kableExtra::pack_rows("Macaque", 17, 24)
```
