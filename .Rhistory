knitr::opts_chunk$set(echo = TRUE, message=F, cache = T)
d %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d %>%
dplyr::sample_n(size=10)
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
m1_gor <-
bpc(
gor,
player0 = 'image1',
player1 = 'image2',
result_column = 'y',
model_type = 'bt',
priors = list(prior_lambda_std = 1.0),
iter = 2000
)
m1_gor <-
bpc(
d,
player0 = 'image1',
player1 = 'image2',
result_column = 'y',
model_type = 'bt',
priors = list(prior_lambda_std = 1.0),
iter = 2000
)
d <- readr::read_csv('data/touchscreen.csv') %>%
dplyr::filter(species_type=='Gorilla') %>%
dplyr::select(species_type, SubjectCode, Trial, image1, image2, image_chosen)
d <- d %>%
dplyr::mutate(y =ifelse(image_chosen==image1, 0, 1))
d$image1 <- dplyr::recode(d$image1, "Ca" = 'Carrot')
d$image1 <- dplyr::recode(d$image1, "Cu" = 'Cucumber')
d$image1 <- dplyr::recode(d$image1, "Tu" = 'Turnip')
d$image1 <- dplyr::recode(d$image1, "Gr" = 'Grape')
d$image1 <- dplyr::recode(d$image1, "To" = 'Tomato')
d$image1 <- dplyr::recode(d$image1, "Ap" = 'Apple')
View(d)
d <- readr::read_csv('data/touchscreen.csv') %>%
dplyr::filter(species_type=='Gorilla') %>%
dplyr::select(species_type, SubjectCode, Trial, image1, image2, image_chosen)
d <- d %>%
dplyr::mutate(y =ifelse(image_chosen==image1, 0, 1)) %>%
select(-image_chosen)
d$image1 <- dplyr::recode(d$image1, "Ca" = 'Carrot')
d$image1 <- dplyr::recode(d$image1, "Cu" = 'Cucumber')
d$image1 <- dplyr::recode(d$image1, "Tu" = 'Turnip')
d$image1 <- dplyr::recode(d$image1, "Gr" = 'Grape')
d$image1 <- dplyr::recode(d$image1, "To" = 'Tomato')
d$image1 <- dplyr::recode(d$image1, "Ap" = 'Apple')
d$image2 <- dplyr::recode(d$image2, "Ca" = 'Carrot')
d$image2 <- dplyr::recode(d$image2, "Cu" = 'Cucumber')
d$image2 <- dplyr::recode(d$image2, "Tu" = 'Turnip')
d$image2 <- dplyr::recode(d$image2, "Gr" = 'Grape')
d$image2 <- dplyr::recode(d$image2, "To" = 'Tomato')
d$image2 <- dplyr::recode(d$image2, "Ap" = 'Apple')
d %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
m1_gor <-
bpc(
d,
player0 = 'image1',
player1 = 'image2',
result_column = 'y',
model_type = 'bt',
priors = list(prior_lambda_std = 1.0),
iter = 2000
)
save_bpc_model(m1_gor, 'm1_gor', 'fittedmodels')
m1_gor
m1_gor <-
bpc(
d,
player0 = 'image1',
player1 = 'image2',
result_column = 'y',
model_type = 'bt',
priors = list(prior_lambda_std = 0.5),
iter = 3000
)
save_bpc_model(m1_gor, 'm1_gor', 'fittedmodels')
plot(m1_gor)
plot(m1_gor, rotate_x_labels = T)
plot(m1_gor, rotate_x_labels = T)+
scale_x_discrete(
labels = c(
"Turnip",
"Cucumber",
"Carrot",
"Apple",
"Grape",
"Tomato"
))
plot(m1_gor, rotate_x_labels = T)+
scale_x_discrete(
labels = c(
"Turnip",
"Cucumber",
"Carrot",
"Apple",
"Grape",
"Tomato"
))
?bpcs
?`bpcs-package`
library(devtools)
load_all(path = "/Users/davidis/Google Drive/Studies/PhD/papers/bpcs")
load_all(path = "/Users/davidis/Google Drive/Studies/PhD/papers/bpcs")
get_probabilities_table(m1_gor, format='html')
load_all(path = "/Users/davidis/Google Drive/Studies/PhD/papers/bpcs")
get_probabilities_table(m1_gor, format='html')
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy')
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::select(-X1)
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::select(-X1, -Variable)
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::select(-X1, -Variable. -ValueType)
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::select(-X1, -Variable, -ValueType)
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Variable, Iteration) %>%
dplyr::mutate(Rank=-rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Iteration) %>%
dplyr::mutate(Rank=-rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::select(-X1, -Variable, -ValueType) %>%
mutate(id=n())
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::select(-X1, -Variable, -ValueType) %>%
mutate(id=row_number())
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Iteration) %>%
dplyr::mutate(Rank=-rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
n_models = length(unique(d2$Model))
comb <- gtools::combinations(n=n_models, r=2, v=seq(1:n_models), repeats.allowed = F) #all teh paired combinations
n_models = length(unique(d2$Model))
comb <- gtools::combinations(n=n_models, r=2, v=seq(1:n_models), repeats.allowed = F) #all teh paired combinations
d_acc_bt <-  dplyr::tribble(~model0, ~model1, ~y, ~Iteration, ~Dataset, ~DatasetType)
#now we loop each row of the rank wide dataset and create a new one
for(i in 1:nrow(d_acc_rank))
{
current_row <- d_acc_rank[i,]
for(j in 1:nrow(comb)){
comb_row <- comb[j,]
model0 <- models[comb_row[1]]
model0_rank <- current_row[[1,model0]]
model1 <- models[comb_row[2]]
model1_rank <- current_row[[1,model1]]
diff_rank <- model1_rank - model0_rank
#SInce higher accuracy is better if model 1 rank- model 0 rank is positive than model1 wins and y=1 else y=0
y <- ifelse(diff_rank>0, 1, 0)
d_acc_bt <-d_acc_bt %>%
add_row(model0=model,
model1=model1,
y=y,
Iteration=current_row$Iteration,
Dataset=current_row$Dataset,
DatasetType=current_row$DataType)
}
}
models<-unique(d2$Model)
n_models = length(models)
comb <- gtools::combinations(n=n_models, r=2, v=seq(1:n_models), repeats.allowed = F) #all teh paired combinations
d_acc_bt <-  dplyr::tribble(~model0, ~model1, ~y, ~Iteration, ~Dataset, ~DatasetType)
#now we loop each row of the rank wide dataset and create a new one
for(i in 1:nrow(d_acc_rank))
{
current_row <- d_acc_rank[i,]
for(j in 1:nrow(comb)){
comb_row <- comb[j,]
model0 <- models[comb_row[1]]
model0_rank <- current_row[[1,model0]]
model1 <- models[comb_row[2]]
model1_rank <- current_row[[1,model1]]
diff_rank <- model1_rank - model0_rank
#SInce higher accuracy is better if model 1 rank- model 0 rank is positive than model1 wins and y=1 else y=0
y <- ifelse(diff_rank>0, 1, 0)
d_acc_bt <-d_acc_bt %>%
add_row(model0=model,
model1=model1,
y=y,
Iteration=current_row$Iteration,
Dataset=current_row$Dataset,
DatasetType=current_row$DataType)
}
}
models<-unique(d2$Model)
n_models = length(models)
comb <- gtools::combinations(n=n_models, r=2, v=seq(1:n_models), repeats.allowed = F) #all teh paired combinations
d_acc_bt <-  dplyr::tribble(~model0, ~model1, ~y, ~Iteration, ~Dataset, ~DatasetType)
#now we loop each row of the rank wide dataset and create a new one
for(i in 1:nrow(d_acc_rank))
{
current_row <- d_acc_rank[i,]
for(j in 1:nrow(comb)){
comb_row <- comb[j,]
model0 <- models[comb_row[1]]
model0_rank <- current_row[[1,model0]]
model1 <- models[comb_row[2]]
model1_rank <- current_row[[1,model1]]
diff_rank <- model1_rank - model0_rank
#SInce higher accuracy is better if model 1 rank- model 0 rank is positive than model1 wins and y=1 else y=0
y <- ifelse(diff_rank>0, 1, 0)
d_acc_bt <-d_acc_bt %>%
add_row(model0=model0,
model1=model1,
y=y,
Iteration=current_row$Iteration,
Dataset=current_row$Dataset,
DatasetType=current_row$DataType)
}
}
models
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::filter(Model=='LabelPropagation_knn' |
Model=='LabelPropagation_rbf' |
Model=='LabelSpreading_knn' |
Model=='LabelSpreading_rbf') %>%
dplyr::select(-X1, -Variable, -ValueType) %>%
mutate(id=row_number())
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Iteration) %>%
dplyr::mutate(Rank=-rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
models<-unique(d2$Model)
n_models = length(models)
comb <- gtools::combinations(n=n_models, r=2, v=seq(1:n_models), repeats.allowed = F) #all teh paired combinations
d_acc_bt <-  dplyr::tribble(~model0, ~model1, ~y, ~Iteration, ~Dataset, ~DatasetType)
#now we loop each row of the rank wide dataset and create a new one
for(i in 1:nrow(d_acc_rank))
{
current_row <- d_acc_rank[i,]
for(j in 1:nrow(comb)){
comb_row <- comb[j,]
model0 <- models[comb_row[1]]
model0_rank <- current_row[[1,model0]]
model1 <- models[comb_row[2]]
model1_rank <- current_row[[1,model1]]
diff_rank <- model1_rank - model0_rank
#SInce higher accuracy is better if model 1 rank- model 0 rank is positive than model1 wins and y=1 else y=0
y <- ifelse(diff_rank>0, 1, 0)
d_acc_bt <-d_acc_bt %>%
add_row(model0=model0,
model1=model1,
y=y,
Iteration=current_row$Iteration,
Dataset=current_row$Dataset,
DatasetType=current_row$DataType)
}
}
d_acc_bt %>%
dplyr::sample_n(size=20) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
View(d_acc_rank)
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Iteration) %>%
dplyr::mutate(Rank=-rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
View(d_acc_rank)
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Iteration) %>%
dplyr::mutate(Rank=rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
View(d_acc_rank)
models
View(d2)
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::filter(Model=='LabelPropagation_knn' |
Model=='LabelPropagation_rbf' |
Model=='LabelSpreading_knn' |
Model=='LabelSpreading_rbf') %>%
dplyr::select(-X1, -Variable) %>%
mutate(id=row_number())
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::filter(Model=='LabelPropagation_knn' |
Model=='LabelPropagation_rbf' |
Model=='LabelSpreading_knn' |
Model=='LabelSpreading_rbf') %>%
dplyr::select(-X1, -ValueType) %>%
mutate(id=row_number())
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Variable, Iteration) %>%
dplyr::mutate(Rank=rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
models<-unique(d2$Model)
d2 <- read_csv('./data/auto-label-comparison.csv') %>%
dplyr::rename(Value='value') %>%
dplyr::filter(ValueType=='accuracy') %>%
dplyr::filter(Model=='LabelPropagation_knn' |
Model=='LabelPropagation_rbf' |
Model=='LabelSpreading_knn' |
Model=='LabelSpreading_rbf')
d2 %>%
dplyr::sample_n(size=10) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Variable, Iteration) %>%
dplyr::mutate(Rank=-rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
d_acc_rank
View(d_acc_rank)
d_acc_rank <- d2 %>%
dplyr::group_by(Dataset, Variable, Iteration) %>%
dplyr::mutate(Rank=-rank(Value, ties.method = 'random')) %>%
dplyr::ungroup() %>%
dplyr::select(-Value) %>% #we need to drop the Value variable to pivot wider
tidyr::pivot_wider(names_from = Model,
values_from=Rank)
models<-unique(d2$Model)
n_models = length(models)
comb <- gtools::combinations(n=n_models, r=2, v=seq(1:n_models), repeats.allowed = F) #all teh paired combinations
d_acc_bt <-  dplyr::tribble(~model0, ~model1, ~y, ~Iteration, ~Dataset, ~DatasetType)
#now we loop each row of the rank wide dataset and create a new one
for(i in 1:nrow(d_acc_rank))
{
current_row <- d_acc_rank[i,]
for(j in 1:nrow(comb)){
comb_row <- comb[j,]
model0 <- models[comb_row[1]]
model0_rank <- current_row[[1,model0]]
model1 <- models[comb_row[2]]
model1_rank <- current_row[[1,model1]]
diff_rank <- model1_rank - model0_rank
#SInce higher accuracy is better if model 1 rank- model 0 rank is positive than model1 wins and y=1 else y=0
y <- ifelse(diff_rank>0, 1, 0)
d_acc_bt <-d_acc_bt %>%
add_row(model0=model0,
model1=model1,
y=y,
Iteration=current_row$Iteration,
Dataset=current_row$Dataset,
DatasetType=current_row$DataType)
}
}
View(d_acc_bt)
d_acc_bt %>%
dplyr::sample_n(size=20) %>%
kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
kableExtra::scroll_box(width = "100%")
m1_autol <-
bpc(
d,
player0 = 'image1',
player1 = 'image2',
result_column = 'y',
model_type = 'bt-U',
cluster = c("Dataset","DatasetType"),
priors = list(prior_lambda_std = 0.5, prior_U1_std=1.0, prior_U2_std=1.0),
iter = 3000
)
m1_autol <-
bpc(
d,
player0 = 'model0',
player1 = 'model1',
result_column = 'y',
model_type = 'bt-U',
cluster = c("Dataset","DatasetType"),
priors = list(prior_lambda_std = 0.5, prior_U1_std=1.0, prior_U2_std=1.0),
iter = 3000
)
?bpcs
?bpc
m1_autol <-
bpc(
d_acc_bt,
player0 = 'model0',
player1 = 'model1',
result_column = 'y',
model_type = 'bt-U',
cluster = c("Dataset","DatasetType"),
priors = list(prior_lambda_std = 0.5, prior_U1_std=1.0, prior_U2_std=1.0),
iter = 3000
)
save_bpc_model(m1_autol, 'm1_autol', 'fittedmodels')
m1_autol <-
bpc(
d_acc_bt,
player0 = 'model0',
player1 = 'model1',
result_column = 'y',
model_type = 'bt-U',
cluster = c("Dataset"),
priors = list(prior_lambda_std = 0.5, prior_U1_std=1.0),
iter = 3000
)
save_bpc_model(m1_autol, 'm1_autol', 'fittedmodels')
data("brasil_soccer_league")
knitr::kable(head(brasil_soccer_league))
d3 <- brasil_soccer_league %>%
dplyr::filter(Date >= as.Date("2019-01-01") &
Date <= as.Date("2019-12-31")) %>%
dplyr::select(HomeTeam, VisitorTeam, ScoreHomeTeam, ScoreVisitorTeam, Round)
m_football <- bpc(d3,
player0 = 'VisitorTeam',
player1 =  'HomeTeam',
player0_score = 'ScoreVisitorTeam',
player1_score = 'ScoreHomeTeam',
model_type = 'davidson',
solve_ties = 'none',
priors = list(prior_lambda_std=2.0), # making a more informative prior to improve convergence
iter = 3000) #stan indicates a low bulk ESS so we are increasing the number of iterations
save_bpc_model(m_football, 'm_football', 'fittedmodels')
get_probabilities_table(m1_autol, format = 'html', model_type = 'bt')
get_rank_of_players_table(m1_autol, format = 'html')
get_rank_of_players_table(m1_autol, format = 'html')
